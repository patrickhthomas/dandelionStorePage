/**
 * Components
 */
export { motion, createDomMotionComponent } from "framer-motion/types/render/dom";
export { m } from "framer-motion/types/render/dom/minimal-component";
export { AnimatePresence } from "framer-motion/types/components/AnimatePresence";
export { AnimateSharedLayout } from "framer-motion/types/components/AnimateSharedLayout";
export { HTMLVisualElement } from "framer-motion/types/render/dom/HTMLVisualElement";
/**
 * Features
 */
export { Animation as AnimationFeature } from "framer-motion/types/motion/features/animation";
export { Drag as DragFeature } from "framer-motion/types/motion/features/drag";
export { Exit as ExitFeature } from "framer-motion/types/motion/features/exit";
export { Gestures as GesturesFeature } from "framer-motion/types/motion/features/gestures";
export { AnimateLayout as AnimateLayoutFeature } from "framer-motion/types/motion/features/layout/Animate";
/**
 * Motion values
 */
export { useMotionValue } from "framer-motion/types/value/use-motion-value";
export { useMotionTemplate } from "framer-motion/types/value/use-motion-template";
export { MotionValue, motionValue, PassiveEffect, Subscriber } from "framer-motion/types/value";
export { resolveMotionValue } from "framer-motion/types/value/utils/resolve-motion-value";
export { useTransform } from "framer-motion/types/value/use-transform";
export { useSpring } from "framer-motion/types/value/use-spring";
export { useElementScroll } from "framer-motion/types/value/scroll/use-element-scroll";
export { useViewportScroll } from "framer-motion/types/value/scroll/use-viewport-scroll";
/**
 * Accessibility
 */
export { useReducedMotion } from "framer-motion/types/utils/use-reduced-motion";
/**
 * Utils
 */
export { AnimationControls, animationControls, } from "framer-motion/types/animation/AnimationControls";
export { useAnimation } from "framer-motion/types/animation/use-animation";
export { animate } from "framer-motion/types/animation/animate";
export { animateVisualElement } from "framer-motion/types/render/VisualElement/utils/animation";
export { HoverHandlers, TapHandlers, PanHandlers, FocusHandlers, TapInfo, PanInfo, GestureHandlers, useTapGesture, usePanGesture, useGestures, } from "framer-motion/types/gestures";
export { useCycle } from "framer-motion/types/utils/use-cycle";
export { transform } from "framer-motion/types/utils/transform";
export { isValidMotionProp } from "framer-motion/types/motion/utils/valid-prop";
export { usePresence, useIsPresent, } from "framer-motion/types/components/AnimatePresence/use-presence";
export { useDragControls, DragControls, } from "framer-motion/types/gestures/drag/use-drag-controls";
export { useDomEvent } from "framer-motion/types/events/use-dom-event";
export { useExternalRef } from "framer-motion/types/motion/utils/use-external-ref";
export { createMotionComponent } from "framer-motion/types/motion";
export { addScaleCorrection } from "framer-motion/types/render/dom/layout/scale-correction";
/**
 * Contexts
 */
export { MotionConfig, MotionConfigContext, } from "framer-motion/types/motion/context/MotionConfigContext";
export { PresenceContext } from "framer-motion/types/components/AnimatePresence/PresenceContext";
export { LayoutGroupContext } from "framer-motion/types/components/AnimateSharedLayout/LayoutGroupContext";
export { useVariantContext } from "framer-motion/types/motion/context/MotionContext";
/**
 * Types
 */
export { HTMLMotionProps, SVGMotionProps, SVGAttributesAsMotionValues, ForwardRefComponent, } from "framer-motion/types/render/dom/types";
export { CustomDomComponent } from "framer-motion/types/render/dom";
export { ScrollMotionValues } from "framer-motion/types/value/scroll/utils";
export { AnimationProps, MotionProps, MotionCallbacks, MotionAdvancedProps, MotionStyle, MotionTransform, VariantLabels, RelayoutInfo, ResolveLayoutTransition, } from "framer-motion/types/motion/types";
export { Orchestration, Repeat, Tween, Spring, Keyframes, Inertia, None, EasingFunction, Target, TargetAndTransition, Transition, ResolvedKeyframesTarget, KeyframesTarget, CustomValueType, ResolvedSingleTarget, SingleTarget, ResolvedValueTarget, ValueTarget, Variant, Variants, } from "framer-motion/types/types";
export { EventInfo } from "framer-motion/types/events/types";
export { MotionFeature, FeatureProps } from "framer-motion/types/motion/features/types";
export { DraggableProps, DragHandlers } from "framer-motion/types/gestures/drag/types";
export { LayoutProps } from "framer-motion/types/motion/features/layout/types";
export { AnimatePresenceProps } from "framer-motion/types/components/AnimatePresence/types";
export { SharedLayoutProps } from "framer-motion/types/components/AnimateSharedLayout/types";
export { SharedLayoutAnimationConfig, VisibilityAction, } from "framer-motion/types/components/AnimateSharedLayout/types";
export { SharedLayoutSyncMethods, SharedLayoutContext, FramerTreeLayoutContext, SyncLayoutLifecycles, createBatcher, } from "framer-motion/types/components/AnimateSharedLayout/SharedLayoutContext";
export * from "framer-motion/types/types/geometry";
/**
 * Deprecated
 */
export { useAnimatedState as useDeprecatedAnimatedState } from "framer-motion/types/animation/use-animated-state";
export { useInvertedScale as useDeprecatedInvertedScale } from "framer-motion/types/value/use-inverted-scale";
